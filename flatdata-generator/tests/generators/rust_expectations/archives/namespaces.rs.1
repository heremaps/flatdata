pub mod n {
#[repr(transparent)]
#[derive(Clone)]
pub struct S {
    data: [u8; 8],
}

impl S {
    /// Unsafe since the struct might not be self-contained
    pub unsafe fn new_unchecked( ) -> Self {
        Self{data : [0; 8]}
    }
}

impl flatdata::Struct for S {
    unsafe fn create_unchecked( ) -> Self {
        Self{data : [0; 8]}
    }

    const SIZE_IN_BYTES: usize = 8;
    const IS_OVERLAPPING_WITH_NEXT : bool = false;
}

impl S {
    pub fn new( ) -> Self {
        Self{data : [0; 8]}
    }

    /// Create reference from byte array of matching size
    pub fn from_bytes(data: &[u8; 8]) -> &Self {
        // Safety: This is safe since S is repr(transparent)
        unsafe{ std::mem::transmute( data ) }
    }

    /// Create reference from byte array of matching size
    pub fn from_bytes_mut(data: &mut [u8; 8]) -> &mut Self {
        // Safety: This is safe since S is repr(transparent)
        unsafe{ std::mem::transmute( data ) }
    }

    /// Create reference from byte array
    pub fn from_bytes_slice(data: &[u8]) -> Result<&Self, flatdata::ResourceStorageError> {
        // We cannot rely on TryFrom here, since it does not yet support > 33 bytes
        if data.len() < 8 {
            assert_eq!(data.len(), 8);
            return Err(flatdata::ResourceStorageError::UnexpectedDataSize);
        }
        let ptr = data.as_ptr() as *const [u8; 8];
        // Safety: We checked length before
        Ok(Self::from_bytes(unsafe { &*ptr }))
    }

    /// Create reference from byte array
    pub fn from_bytes_slice_mut(data: &mut [u8]) -> Result<&mut Self, flatdata::ResourceStorageError> {
        // We cannot rely on TryFrom here, since it does not yet support > 33 bytes
        if data.len() < 8 {
            assert_eq!(data.len(), 8);
            return Err(flatdata::ResourceStorageError::UnexpectedDataSize);
        }
        let ptr = data.as_ptr() as *mut [u8; 8];
        // Safety: We checked length before
        Ok(Self::from_bytes_mut(unsafe { &mut *ptr }))
    }

    pub fn as_bytes(&self) -> &[u8; 8] {
        &self.data
    }
}

impl Default for S {
    fn default( ) -> Self {
        Self::new( )
    }
}

unsafe impl flatdata::NoOverlap for S {}

impl S {
    #[inline]
    pub fn x(&self) -> u64 {
        let value = flatdata_read_bytes!(u64, self.data.as_ptr(), 0, 64);
        unsafe { std::mem::transmute::<u64, u64>(value) }
    }

}

impl std::fmt::Debug for S {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("S")
            .field("x", &self.x())
            .finish()
    }
}

impl std::cmp::PartialEq for S {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.x() == other.x()     }
}

impl S {
    #[inline]
    #[allow(missing_docs)]
    pub fn set_x(&mut self, value: u64) {
        flatdata_write_bytes!(u64; value, self.data, 0, 64)
    }


    /// Copies the data from `other` into this struct.
    #[inline]
    pub fn fill_from(&mut self, other: &S) {
        self.set_x(other.x());
    }
}



#[derive(Clone)]
pub struct X {
    _storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    payload : flatdata::RawData<'static>,
}

impl X {
    fn signature_name(archive_name: &str) -> String {
        format!("{}.archive", archive_name)
    }

    #[inline]
    pub fn payload(&self) -> flatdata::RawData {
        self.payload
    }

}

impl ::std::fmt::Debug for X {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct("X")
            .field("payload", &self.payload())
            .finish()
    }
}

impl X {
    pub fn open(storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>)
        -> ::std::result::Result<Self, flatdata::ResourceStorageError>
    {
        #[allow(unused_imports)]
        use flatdata::SliceExt;
        // extend lifetime since Rust cannot know that we reference a cache here
        #[allow(unused_variables)]
        let extend = |x : Result<&[u8], flatdata::ResourceStorageError>| -> Result<&'static [u8], flatdata::ResourceStorageError> {x.map(|x| unsafe{std::mem::transmute(x)})};

        storage.read(&Self::signature_name("X"), schema::x::X)?;

        let resource = extend(storage.read("payload", schema::x::resources::PAYLOAD));
        let payload = resource.map(|x| flatdata::RawData::new(x))?;

        Ok(Self {
            _storage: storage,
            payload,
        })
    }
}

/// Builder for creating [`X`] archives.
///
///[`X`]: struct.X.html
#[derive(Clone, Debug)]
pub struct XBuilder {
    storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>
}

impl XBuilder {
    /// Stores [`payload`] in the archive.
    ///
    /// [`payload`]: struct.X.html#method.payload
    #[inline]
    pub fn set_payload(&self, data: &[u8]) -> ::std::io::Result<()> {
        self.storage.write("payload", schema::x::resources::PAYLOAD, data)
    }

}

impl XBuilder {
    pub fn new(
        storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    ) -> Result<Self, flatdata::ResourceStorageError> {
        flatdata::create_archive("X", schema::x::X, &storage)?;
        Ok(Self { storage })
    }
}


#[doc(hidden)]
pub mod schema {
pub mod x {

pub const X: &str = r#"namespace n {
archive X
{
    payload : raw_data;
}
}

"#;

pub mod resources {
pub const PAYLOAD: &str = r#"namespace n {
archive X
{
    payload : raw_data;
}
}

"#;
}
}
}
}

#[allow(missing_docs)]
pub mod m {
#[repr(transparent)]
#[derive(Clone)]
pub struct S {
    data: [u8; 8],
}

impl S {
    /// Unsafe since the struct might not be self-contained
    pub unsafe fn new_unchecked( ) -> Self {
        Self{data : [0; 8]}
    }
}

impl flatdata::Struct for S {
    unsafe fn create_unchecked( ) -> Self {
        Self{data : [0; 8]}
    }

    const SIZE_IN_BYTES: usize = 8;
    const IS_OVERLAPPING_WITH_NEXT : bool = false;
}

impl S {
    pub fn new( ) -> Self {
        Self{data : [0; 8]}
    }

    /// Create reference from byte array of matching size
    pub fn from_bytes(data: &[u8; 8]) -> &Self {
        // Safety: This is safe since S is repr(transparent)
        unsafe{ std::mem::transmute( data ) }
    }

    /// Create reference from byte array of matching size
    pub fn from_bytes_mut(data: &mut [u8; 8]) -> &mut Self {
        // Safety: This is safe since S is repr(transparent)
        unsafe{ std::mem::transmute( data ) }
    }

    /// Create reference from byte array
    pub fn from_bytes_slice(data: &[u8]) -> Result<&Self, flatdata::ResourceStorageError> {
        // We cannot rely on TryFrom here, since it does not yet support > 33 bytes
        if data.len() < 8 {
            assert_eq!(data.len(), 8);
            return Err(flatdata::ResourceStorageError::UnexpectedDataSize);
        }
        let ptr = data.as_ptr() as *const [u8; 8];
        // Safety: We checked length before
        Ok(Self::from_bytes(unsafe { &*ptr }))
    }

    /// Create reference from byte array
    pub fn from_bytes_slice_mut(data: &mut [u8]) -> Result<&mut Self, flatdata::ResourceStorageError> {
        // We cannot rely on TryFrom here, since it does not yet support > 33 bytes
        if data.len() < 8 {
            assert_eq!(data.len(), 8);
            return Err(flatdata::ResourceStorageError::UnexpectedDataSize);
        }
        let ptr = data.as_ptr() as *mut [u8; 8];
        // Safety: We checked length before
        Ok(Self::from_bytes_mut(unsafe { &mut *ptr }))
    }

    pub fn as_bytes(&self) -> &[u8; 8] {
        &self.data
    }
}

impl Default for S {
    fn default( ) -> Self {
        Self::new( )
    }
}

unsafe impl flatdata::NoOverlap for S {}

impl S {
    #[inline]
    pub fn x(&self) -> u64 {
        let value = flatdata_read_bytes!(u64, self.data.as_ptr(), 0, 64);
        unsafe { std::mem::transmute::<u64, u64>(value) }
    }

}

impl std::fmt::Debug for S {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("S")
            .field("x", &self.x())
            .finish()
    }
}

impl std::cmp::PartialEq for S {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.x() == other.x()     }
}

impl S {
    #[inline]
    #[allow(missing_docs)]
    pub fn set_x(&mut self, value: u64) {
        flatdata_write_bytes!(u64; value, self.data, 0, 64)
    }


    /// Copies the data from `other` into this struct.
    #[inline]
    pub fn fill_from(&mut self, other: &S) {
        self.set_x(other.x());
    }
}



#[derive(Clone)]
pub struct X {
    _storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    payload : flatdata::RawData<'static>,
}

impl X {
    fn signature_name(archive_name: &str) -> String {
        format!("{}.archive", archive_name)
    }

    #[inline]
    pub fn payload(&self) -> flatdata::RawData {
        self.payload
    }

}

impl ::std::fmt::Debug for X {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct("X")
            .field("payload", &self.payload())
            .finish()
    }
}

impl X {
    pub fn open(storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>)
        -> ::std::result::Result<Self, flatdata::ResourceStorageError>
    {
        #[allow(unused_imports)]
        use flatdata::SliceExt;
        // extend lifetime since Rust cannot know that we reference a cache here
        #[allow(unused_variables)]
        let extend = |x : Result<&[u8], flatdata::ResourceStorageError>| -> Result<&'static [u8], flatdata::ResourceStorageError> {x.map(|x| unsafe{std::mem::transmute(x)})};

        storage.read(&Self::signature_name("X"), schema::x::X)?;

        let resource = extend(storage.read("payload", schema::x::resources::PAYLOAD));
        let payload = resource.map(|x| flatdata::RawData::new(x))?;

        Ok(Self {
            _storage: storage,
            payload,
        })
    }
}

/// Builder for creating [`X`] archives.
///
///[`X`]: struct.X.html
#[derive(Clone, Debug)]
pub struct XBuilder {
    storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>
}

impl XBuilder {
    /// Stores [`payload`] in the archive.
    ///
    /// [`payload`]: struct.X.html#method.payload
    #[inline]
    pub fn set_payload(&self, data: &[u8]) -> ::std::io::Result<()> {
        self.storage.write("payload", schema::x::resources::PAYLOAD, data)
    }

}

impl XBuilder {
    pub fn new(
        storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    ) -> Result<Self, flatdata::ResourceStorageError> {
        flatdata::create_archive("X", schema::x::X, &storage)?;
        Ok(Self { storage })
    }
}


#[doc(hidden)]
pub mod schema {
pub mod x {

pub const X: &str = r#"namespace m {
archive X
{
    payload : raw_data;
}
}

"#;

pub mod resources {
pub const PAYLOAD: &str = r#"namespace m {
archive X
{
    payload : raw_data;
}
}

"#;
}
}
}
}

#[allow(missing_docs)]
pub mod a {


/// Enum for read-only heterogeneous access to elements in a
/// bucket of the [`multi`] resource.
///
/// [`multi`]: struct.Archive{.a.A}.html#method.multi
#[derive(Clone, PartialEq)]
pub enum MultiRef<'a> {
    #[allow(missing_docs)]
    S(&'a super::n::S),}

impl<'a> ::std::fmt::Debug for MultiRef<'a> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match *self {
            MultiRef::S(ref inner) => write!(f, "{:?}", inner),
        }
    }
}

impl<'a> flatdata::VariadicRef for MultiRef<'a> {
    #[inline]
    fn size_in_bytes(&self) -> usize {
        match *self {
            MultiRef::S(_) => <super::n::S as flatdata::Struct>::SIZE_IN_BYTES,
        }
    }
}

/// Builder of buckets in the [`multi`] resource.
///
/// Refers to a single bucket in the [`multi`] multivector and
/// provides methods for adding heterogeneous data to the bucket.
///
/// [`multi`]: struct.Archive{.a.A}.html#method.multi
pub struct MultiBuilder<'a> {
    data: &'a mut Vec<u8>
}

impl<'a> MultiBuilder<'a> {
    /// Adds data of the type [`S`] to the bucket.
    ///
    /// [`S`]: struct.S.html
    #[inline]
    pub fn add_s<'b>(&'b mut self) -> &'b mut super::n::S {
        let old_len = self.data.len();
        let increment = 1 + <super::n::S as flatdata::Struct>::SIZE_IN_BYTES;
        self.data.resize(old_len + increment, 0);
        self.data[old_len] = 0;
        let slice = &mut self.data[1 + old_len..];
        super::n::S::from_bytes_slice_mut(slice).expect("Logic error: Cannot create super::n::S from slice")
    }
}

/// Variadic struct attached to the [`multi`] archive resource.
///
/// It unifies the following data types:
//
/// * [`S`]
///
/// ## Access pattern
///
/// This structure is used as a template parameter in [`multi`] multivector/
/// multiarray view. It does not contain any data, instead it references
///
/// * [`MultiRef`] for the read-only heterogeneous access, and
/// * [`MultiBuilder`] for the mutable builder pattern access.
///
/// [`multi`]: struct.Archive{.a.A}.html#method.multi
/// [`MultiRef`]: enum.MultiRef.html
/// [`MultiBuilder`]: struct.MultiBuilder.html
/// [`S`]: struct.S.html
#[derive(Clone)]
pub struct Multi {}

impl flatdata::VariadicIndex for Multi {
    type Index = super::_builtin::multivector::IndexType32;
}

impl<'a> flatdata::VariadicStruct<'a> for Multi {
    type Item = MultiRef<'a>;

    #[inline]
    fn create(index: flatdata::TypeIndex, data: &'a [u8]) -> Self::Item
    {
        match index {
                0 => MultiRef::S(super::n::S::from_bytes_slice(&data).expect("Corrupted data")),
            _ => panic!("invalid type index {} for variadic type MultiRef", index),
        }
    }

    type ItemMut = MultiBuilder<'a>;

    #[inline]
    fn create_mut(data: &'a mut Vec<u8>) -> Self::ItemMut
    {
        Self::ItemMut { data }
    }
}

#[derive(Clone)]
pub struct A {
    _storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    single : &'static super::n::S,
    list : &'static [super::m::S],
    multi : flatdata::MultiArrayView<'static, Multi>,
    inner : super::n::X
,
}

impl A {
    fn signature_name(archive_name: &str) -> String {
        format!("{}.archive", archive_name)
    }

    #[inline]
    pub fn single(&self) -> &super::n::S {
        self.single
    }

    #[inline]
    pub fn list(&self) -> &[super::m::S] {
        self.list
    }

    #[inline]
    pub fn multi(&self) -> &flatdata::MultiArrayView<Multi> {
        &self.multi
    }

    #[inline]
    pub fn inner(&self) -> &super::n::X {
        &self.inner
    }

}

impl ::std::fmt::Debug for A {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct("A")
            .field("single", &self.single())
            .field("list", &self.list())
            .field("multi", &self.multi())
            .field("inner", &self.inner())
            .finish()
    }
}

impl A {
    pub fn open(storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>)
        -> ::std::result::Result<Self, flatdata::ResourceStorageError>
    {
        #[allow(unused_imports)]
        use flatdata::SliceExt;
        // extend lifetime since Rust cannot know that we reference a cache here
        #[allow(unused_variables)]
        let extend = |x : Result<&[u8], flatdata::ResourceStorageError>| -> Result<&'static [u8], flatdata::ResourceStorageError> {x.map(|x| unsafe{std::mem::transmute(x)})};

        storage.read(&Self::signature_name("A"), schema::a::A)?;

        let resource = extend(storage.read("single", schema::a::resources::SINGLE));
        let single = resource.map(|x| super::n::S::from_bytes_slice(x))??;
        let resource = extend(storage.read("list", schema::a::resources::LIST));
        let list = resource.map(|x| <&[super::m::S]>::from_bytes(x))??;
        let multi = {
            let index_schema = &format!("index({})", schema::a::resources::MULTI);
            let index = extend(storage.read("multi_index", &index_schema));
            let data = extend(storage.read("multi", schema::a::resources::MULTI));
            let result = match (index, data) {
                (Ok(index), Ok(data)) => {
                    Ok(flatdata::MultiArrayView::new(
                        <&[super::_builtin::multivector::IndexType32]>::from_bytes(index)?,
                        data
                    ))
                }
                (Ok(_), Err(x)) | (Err(x), Ok(_)) => {return Err(x);}
                (Err(x), Err(_)) => Err(x),
            };
            result?
        };
        let inner = super::n::X::open(storage.subdir("inner"))?;

        Ok(Self {
            _storage: storage,
            single,
            list,
            multi,
            inner,
        })
    }
}

/// Builder for creating [`A`] archives.
///
///[`A`]: struct.A.html
#[derive(Clone, Debug)]
pub struct ABuilder {
    storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>
}

impl ABuilder {
    #[inline]
    /// Stores [`single`] in the archive.
    ///
    /// [`single`]: struct.A.html#method.single
    /// Stores [`single`] in the archive.
    pub fn set_single(&self, resource: &super::n::S) -> ::std::io::Result<()> {
        let data = resource.as_bytes();
        self.storage.write("single", schema::a::resources::SINGLE, data)
    }

    #[inline]
    /// Stores [`list`] in the archive.
    ///
    /// [`list`]: struct.A.html#method.list
    pub fn set_list(&self, vector: &[super::m::S]) -> ::std::io::Result<()> {
        use flatdata::SliceExt;
        self.storage.write("list", schema::a::resources::LIST, vector.as_bytes())
    }

    /// Opens [`list`] in the archive for buffered writing.
    ///
    /// Elements can be added to the vector until the [`ExternalVector::close`] method
    /// is called. To flush the data fully into the archive, this method must be called
    /// in the end.
    ///
    /// [`list`]: struct.A.html#method.list
    /// [`ExternalVector::close`]: flatdata/struct.ExternalVector.html#method.close
    #[inline]
    pub fn start_list(&self) -> ::std::io::Result<flatdata::ExternalVector<super::m::S>> {
        flatdata::create_external_vector(&*self.storage, "list", schema::a::resources::LIST)
    }

    /// Opens [`multi`] in the archive for buffered writing.
    ///
    /// Elements can be added to the multivector until the [`MultiVector::close`] method
    /// is called. To flush the data fully into the archive, this method must be called
    /// in the end.
    ///
    /// [`multi`]: struct.A.html#method.multi
    /// [`MultiVector::close`]: flatdata/struct.MultiVector.html#method.close
    #[inline]
    pub fn start_multi(&self) -> ::std::io::Result<flatdata::MultiVector<Multi>> {
        flatdata::create_multi_vector(&*self.storage, "multi", schema::a::resources::MULTI)
    }

    /// Stores [`inner`] in the archive.
    ///
    /// [`inner`]: struct.A.html#method.inner
    #[inline]
    pub fn inner(&self) -> Result<super::n::XBuilder, flatdata::ResourceStorageError> {
        let storage = self.storage.subdir("inner");
        super::n::XBuilder::new(storage)
    }

}

impl ABuilder {
    pub fn new(
        storage: ::std::rc::Rc<dyn flatdata::ResourceStorage>,
    ) -> Result<Self, flatdata::ResourceStorageError> {
        flatdata::create_archive("A", schema::a::A, &storage)?;
        Ok(Self { storage })
    }
}


#[doc(hidden)]
pub mod schema {
pub mod a {

pub const A: &str = r#"namespace n {
struct S
{
    x : u64 : 64;
}
}

namespace m {
struct S
{
    x : u64 : 64;
}
}

namespace n {
archive X
{
    payload : raw_data;
}
}

namespace a {
archive A
{
    single : .n.S;
    list : vector< .m.S >;
    multi : multivector< 32, .n.S >;
    inner : archive .n.X;
}
}

"#;

pub mod resources {
pub const SINGLE: &str = r#"namespace n {
struct S
{
    x : u64 : 64;
}
}

namespace a {
archive A
{
    single : .n.S;
}
}

"#;
pub const LIST: &str = r#"namespace m {
struct S
{
    x : u64 : 64;
}
}

namespace a {
archive A
{
    list : vector< .m.S >;
}
}

"#;
pub const MULTI: &str = r#"namespace n {
struct S
{
    x : u64 : 64;
}
}

namespace a {
archive A
{
    multi : multivector< 32, .n.S >;
}
}

"#;
pub const INNER: &str = r#"namespace n {
archive X
{
    payload : raw_data;
}
}

namespace a {
archive A
{
    inner : archive .n.X;
}
}

"#;
}
}
}
}

#[doc(hidden)]
pub mod _builtin {

#[allow(missing_docs)]
pub mod multivector {

/// Builtin type to for MultiVector index
#[repr(transparent)]
pub struct IndexType32 {
    data: [u8; 4],
}

impl IndexType32 {
    /// Unsafe since the struct might not be self-contained
    pub unsafe fn new_unchecked( ) -> Self {
        Self{data : [0; 4]}
    }
}

impl flatdata::Struct for IndexType32 {
    unsafe fn create_unchecked( ) -> Self {
        Self{data : [0; 4]}
    }

    const SIZE_IN_BYTES: usize = 4;
    const IS_OVERLAPPING_WITH_NEXT : bool = true;
}

impl flatdata::Overlap for IndexType32 {}

impl IndexType32 {
    /// First element of the range [`range`].
    ///
    /// [`range`]: #method.range
    #[inline]
    pub fn value(&self) -> u64 {
        let value = flatdata_read_bytes!(u64, self.data.as_ptr(), 0, 32);
        unsafe { std::mem::transmute::<u64, u64>(value) }
    }

    #[inline]
    pub fn range(&self) -> std::ops::Range<u64> {
        let start = flatdata_read_bytes!(u64, self.data.as_ptr(), 0, 32);
        let end = flatdata_read_bytes!(u64, self.data.as_ptr(), 0 + 4 * 8, 32);
        start..end
    }

}

impl std::fmt::Debug for IndexType32 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.debug_struct("IndexType32")
            .field("value", &self.value())
            .finish()
    }
}

impl std::cmp::PartialEq for IndexType32 {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.value() == other.value()     }
}

impl IndexType32 {
    /// First element of the range [`range`].
    ///
    /// [`range`]: struct.IndexType32Ref.html#method.range
    #[inline]
    #[allow(missing_docs)]
    pub fn set_value(&mut self, value: u64) {
        flatdata_write_bytes!(u64; value, self.data, 0, 32)
    }


    /// Copies the data from `other` into this struct.
    #[inline]
    pub fn fill_from(&mut self, other: &IndexType32) {
        self.set_value(other.value());
    }
}

impl flatdata::IndexStruct for IndexType32 {
    #[inline]
    fn range(&self) -> std::ops::Range<usize> {
        let range = self.range();
        range.start as usize..range.end as usize
    }

    #[inline]
    fn set_index(&mut self, value: usize) {
        self.set_value(value as u64);
    }
}


#[doc(hidden)]
pub mod schema {
}
}

#[doc(hidden)]
pub mod schema {
}
}
