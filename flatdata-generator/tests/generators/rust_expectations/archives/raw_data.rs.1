#[derive(Clone)]
pub struct A {
    _storage: flatdata::StorageHandle,
    data : flatdata::RawData<'static>,
    optional_data : Option<flatdata::RawData<'static>>,
}

impl A {
    fn signature_name(archive_name: &str) -> String {
        format!("{}.archive", archive_name)
    }

    #[inline]
    pub fn data(&self) -> flatdata::RawData {
        self.data
    }

    #[inline]
    pub fn optional_data(&self) -> Option<flatdata::RawData> {
        self.optional_data
    }

}

impl ::std::fmt::Debug for A {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct("A")
            .field("data", &self.data())
            .field("optional_data", &self.optional_data())
            .finish()
    }
}

impl A {
    pub fn open(storage: flatdata::StorageHandle)
        -> ::std::result::Result<Self, flatdata::ResourceStorageError>
    {
        #[allow(unused_imports)]
        use flatdata::SliceExt;
        #[allow(unused_variables)]
        use flatdata::ResourceStorageError as Error;
        // extend lifetime since Rust cannot know that we reference a cache here
        #[allow(unused_variables)]
        let extend = |x : Result<&[u8], Error>| -> Result<&'static [u8], Error> {x.map(|x| unsafe{std::mem::transmute(x)})};

        storage.read(&Self::signature_name("A"), schema::a::A)?;

        let data = {
            use flatdata::check_resource as check;
            let max_size = None;
            let resource = extend(storage.read("data", schema::a::resources::DATA));
            check("data", |r| r.len(), max_size, resource.map(|x| flatdata::RawData::new(x)))?
        };
        let optional_data = {
            use flatdata::check_optional_resource as check;
            let max_size = None;
            let resource = extend(storage.read("optional_data", schema::a::resources::OPTIONAL_DATA));
            check("optional_data", |r| r.len(), max_size, resource.map(|x| flatdata::RawData::new(x)))?
        };

        Ok(Self {
            _storage: storage,
            data,
            optional_data,
        })
    }
}

/// Builder for creating [`A`] archives.
///
///[`A`]: struct.A.html
#[derive(Clone, Debug)]
pub struct ABuilder {
    storage: flatdata::StorageHandle
}

impl ABuilder {
    /// Stores [`data`] in the archive.
    ///
    /// [`data`]: struct.A.html#method.data
    #[inline]
    pub fn set_data(&self, data: &[u8]) -> ::std::io::Result<()> {
        self.storage.write("data", schema::a::resources::DATA, data)
    }

    /// Stores [`optional_data`] in the archive.
    ///
    /// [`optional_data`]: struct.A.html#method.optional_data
    #[inline]
    pub fn set_optional_data(&self, data: &[u8]) -> ::std::io::Result<()> {
        self.storage.write("optional_data", schema::a::resources::OPTIONAL_DATA, data)
    }

}

impl ABuilder {
    pub fn new(
        storage: flatdata::StorageHandle,
    ) -> Result<Self, flatdata::ResourceStorageError> {
        flatdata::create_archive("A", schema::a::A, &storage)?;
        Ok(Self { storage })
    }
}