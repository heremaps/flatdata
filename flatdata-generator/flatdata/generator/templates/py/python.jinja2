#############################################################################
#    ATTENTION!                                                             #
#    This code is automatically generated by flatdata generator.            #
#    Any modifications to this file will be lost upon next regeneration.    #
#############################################################################

import flatdata.lib as flatdata

{% macro structure_definition(tree, struct) %}
{{ struct.doc|to_python_doc}}
class {{ tree.namespace_path(struct, "_") }}_{{ struct.name }}(flatdata.structure.Structure):
    """{{ struct.doc|safe_py_string_line }}"""
    _SCHEMA = """{{ tree.schema(struct) }}"""
    _SIZE_IN_BITS = {{ struct.size_in_bits }}
    _SIZE_IN_BYTES = {{ struct.size_in_bytes }}
    _FIELDS = {
    {% for field in struct.fields %}
        {% if field.doc %}
            {{ field.doc|to_python_doc|indent(8) }}
        {% endif %}
        "{{ field.name }}": flatdata.structure.FieldSignature(offset={{ field.offset }}, width={{ field.type.width }}, is_signed={{ field.type.is_signed }}, dtype="{{ field.type|to_dtype }}"),
    {% endfor %}
    }
    _FIELD_KEYS = {
    {% for field in struct.fields %}
        "{{ field.name }}",
    {% endfor %}
    }
{% endmacro %}

{% macro archive_definition(tree, archive) %}
class {{ tree.namespace_path(archive, "_") }}_{{ archive.name }}(flatdata.archive.Archive):
    _SCHEMA = """{{ tree.schema(archive)|safe_py_string_line }}"""
    {% for resource in archive.resources if not resource|is_bound_resource %}
    _{{ resource.name|upper }}_SCHEMA = """{{ tree.schema(resource)|safe_py_string_line }}"""
    _{{ resource.name|upper }}_DOC = """{{ resource.doc|safe_py_string_line }}"""
    {% endfor %}
    _NAME = "{{ archive.name }}"
    _RESOURCES = {
        "{{ archive.name }}.archive" : flatdata.archive.ResourceSignature(
            container=flatdata.resources.RawData,
            initializer=None,
            schema=_SCHEMA,
            is_optional=False,
            doc="Archive signature"),
    {% for resource in archive.resources if not resource|is_bound_resource %}
        "{{ resource.name }}": flatdata.archive.ResourceSignature(container={{ resource|to_container}},
            initializer={{ resource|to_initializer(tree) }},
            schema=_{{  resource.name|upper }}_SCHEMA,
            is_optional={{ resource.optional }},
            doc=_{{ resource.name|upper }}_DOC),
    {% endfor %}
    }

    def __init__(self, resource_storage):
        flatdata.archive.Archive.__init__(self, resource_storage)
{% endmacro %}

{% for node in nodes %}
    {%- if node|is_structure %}
        {{- structure_definition(tree, node) }}
    {%- elif node|is_archive %}
        {{- archive_definition(tree, node) }}
    {% endif %}
{% endfor %}
