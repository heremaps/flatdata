{% set template_header = 'template< template < typename, int, int, int > class Member >' %}

{% macro declaration(struct) %}
{% set template_name = struct.name +'Template' %}

{{ struct.doc|cpp_doc }}
{{ template_header }}
union {{ template_name }}
{
    {% for field in struct.fields %}
    {% if field.doc %}

        {{ field.doc|cpp_doc }}
    {% endif %}
    {% if field.invalid_value %}
    {% set base_type = "flatdata::Tagged< " + field.type|cpp_base_type + ", " + field.invalid_value.node.path_with("::") + " >" %}
    {% else %}
    {% set base_type = field.type|cpp_base_type %}
    {% endif %}
    using {{ field|typedef_name }} = Member< {{ base_type }}, {{ field.offset }}, {{ field.type.width }}, {{struct.size_in_bytes}} >;
    {{ field|typedef_name }} {{ field.name }};
    {% if field.range %}
    using {{ field.range|snake_to_upper_camel_case }}Type = Member< std::pair< {{ base_type }}, {{ field.type|cpp_base_type}} >, {{ field.offset }}, {{ field.type.width }}, {{struct.size_in_bytes}} >;
    {{ field.range|snake_to_upper_camel_case }}Type {{ field.range }};
    {% endif %}
    {% endfor %}

    /// Stream type accepted by the class
    using StreamType = typename Member< uint32_t, 0, 0, 0 >::StreamType;
    /// Mutable structure type
    using MutatorType = {{ template_name }}< flatdata::Writer >;
    /// Immutable structure type
    using AccessorType = {{ template_name }}< flatdata::Reader >;

    {{ template_name }}( );
    explicit {{ template_name }}( StreamType data );

    /// Get raw data stream
    StreamType data( ) const;
    /// Get structure schema
    static std::string schema( );
    /// Get structure name
    static std::string name( );
    /// Get structure size in bytes
    static constexpr size_t size_in_bytes( );

    bool operator==( const {{ template_name }}& other ) const;
    bool operator!=( const {{ template_name }}& other ) const;
    bool operator<( const {{ template_name }}& other ) const;
    operator {{ template_name }}< flatdata::Reader >( ) const;
    explicit operator bool( ) const;

    std::string to_string( ) const;
    std::string describe( size_t unused = 0 ) const;

    static constexpr bool IS_OVERLAPPING_WITH_NEXT = {{ struct.has_range|lower}};

    /**
    * Private data member, should not be directly used.
    * Cannot be made private.
    * Please refer to C++ Standard, Chapter 9.2, Paragraph 19.
    * This union has to be kept standard-layout, which different access control prevents.
    */
    Member< uint32_t, 0, 0, 0 > _data;
};

{{ struct.doc|cpp_doc }}
typedef {{ template_name }}< flatdata::Reader > {{ struct.name }};
typedef {{ template_name }}< flatdata::Writer > {{ struct.name }}Mutator;
{% endmacro %}

{% macro definition(struct, tree) %}
{% set template_spec = struct.name +'Template< Member >' %}
{% set template_name = struct.name +'Template' %}
namespace internal
{
    const char* const {{ struct.name }}__schema__ = R"schema({{ tree.schema(struct) }})schema";
}

{{ template_header }}
inline
{{ template_spec }}::{{ template_name }}( )
: _data( Member< uint32_t, 0, 0, 0 >{nullptr} )
{
}

{{ template_header }}
inline
{{ template_spec }}::{{ template_name }}( StreamType data )
: _data( Member< uint32_t, 0, 0, 0 >{data} )
{
}

{{ template_header }}
inline
{{ template_spec }}::operator bool( ) const
{
return _data.data != nullptr;
}

{{ template_header }}
inline
typename {{ template_spec }}::StreamType {{struct.name}}Template< Member >::data( ) const { return _data.data; }

{{ template_header }}
inline
std::string {{ template_spec }}::schema( ) { return internal::{{ struct.name }}__schema__; }

{{ template_header }}
inline
std::string {{ template_spec }}::name( ) { return "{{struct.name}}"; }

{{ template_header }}
inline
constexpr size_t {{ template_spec }}::size_in_bytes( ) { return {{struct.size_in_bytes}}; }

{{ template_header }}
inline
bool {{ template_spec }}::operator==( const {{ struct.name }}Template& other ) const
{
    for ( size_t i = 0; i < size_in_bytes( ); i++ )
    {
        if ( _data.data[ i ] != other._data.data[ i ] )
        {
            return false;
        }
    }
    return true;
}

{{ template_header }}
inline
bool {{ template_spec }}::operator!=( const {{ struct.name }}Template& other ) const
{
    return !( *this == other );
}

{{ template_header }}
inline
bool {{ template_spec }}::operator<( const {{ struct.name }}Template& other ) const
{
return
{% for member in struct.fields %}
    {{ member.name }} < other.{{ member.name }}{% if not loop.last %} &&
{%endif%}
{% endfor %};
}

{{ template_header }}
inline
{{ template_spec }}::operator {{ template_name }}< flatdata::Reader >( ) const
{
    return {{ template_name }}< flatdata::Reader >( _data.data );
}

{{ template_header }}
inline
std::string {{ template_spec }}::to_string( ) const
{
    std::ostringstream ss;
    ss << "{{ struct.name }} {" << std::endl <<
    {% for member in struct.fields %}
    {% if member.type_reference | is_enumeration_reference %}
    "    {{ member.name }} : " << {{ member.type_reference.node.parent | cpp_base_type }}::to_string( {{ member.name }} ) << "," << std::endl
    {% elif member.invalid_value %}
    "    {{ member.name }} : " << +*{{ member.name }} << "," << std::endl
    {% else %}
    "    {{ member.name }} : " << +{{ member.name }} << "," << std::endl
    {% endif %}
    {% if not loop.last %}
    <<
    {% else %}
    << "}"
    {%endif%}
    {% endfor %};
    return ss.str( );
}

{{ template_header }}
inline
std::string {{ template_spec }}::describe( size_t /*unused*/ ) const
{
    std::ostringstream ss;
    if( this->operator bool( ) )
    {
        ss << "Structure of size " << size_in_bytes( );
    }
    else
    {
        ss << "Uninitialized Structure " << name();
    }
    return ss.str( );
}
{% endmacro %}
