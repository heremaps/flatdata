{% import "cpp/resource.jinja2" as resource %}

{% macro declaration(archive) %}
{{ archive.doc }}
class {{ archive.name }} : public flatdata::Archive
{
public:
    /// Archive schema
    static const char* schema_definition( );
    /// Archive name
    static const char* name_definition( );

public:
    /**
    * Create and open archive at path.
    * In case opening fails, is_open() or operator bool() returns false.
    *
    * @sa is_open
    * @sa operator bool()
    */
    static {{ archive.name }} open( std::shared_ptr< flatdata::ResourceStorage > storage );
    {{ archive.name }}( ) = default;

    {% for r in archive.resources|supported_resources %}
    {% if r.doc %}

    {{ r.doc|cpp_doc }}
    {% endif %}
    using {{ r|typedef_name }} = {{ resource.reader_type(r) }};
    const {{ r|archive_typedef_usage }}& {{ r.name }}( ) const;

    {% endfor %}

    const char* name( ) const override;
    const char* schema( ) const override;

private:
    explicit {{ archive.name }}( std::shared_ptr< flatdata::ResourceStorage > storage );

    bool load_contents( ) override;
    void describe_resources( std::ostream& stream ) const override;

private:
    {% for r in archive.resources|supported_resources %}
    {{ r|archive_typedef_usage }} m_{{ r.name }};
    {% endfor %}
};

{% set builder_name = archive.name +'Builder' %}
class {{ builder_name }} : public flatdata::ArchiveBuilder
{
public:
    /// Creates Archive builder
    static {{ builder_name }} open( std::shared_ptr< flatdata::ResourceStorage > storage );
    /// Archive schema
    static const char* schema_definition( );

public:  /// Common methods
    {{ builder_name }}( ) = default;
    const char* name( ) const override;
    const char* schema( ) const override;

public:  /// Resources
    {% for r in archive.resources|simple_resources %}
    using {{ r|typedef_name }} = {{ resource.writer_type(r) }};
    using {{ r|typedef_name("Reader") }} = {{ resource.reader_type(r) }};
    {% if r|resource_provides_incremental_builder %}
    {{ r|typedef_name }} start_{{ r.name }}( );
    {% endif %}
    {% if r|provides_setter %}
    bool set_{{ r.name }}( {{ r|typedef_name("Reader") }} data );
    {% endif %}

    {% endfor %}

    {% for r in archive.resources|archive_resources %}
    using {{ r|typedef_name }} = {{ resource.writer_type(r) }};
    {{ r|typedef_name }}& {{ r.name }}( );
    {% endfor %}

private:
    {{ builder_name }}( std::shared_ptr< flatdata::ResourceStorage > storage );

    {% for r in archive.resources|archive_resources %}
    {{ r|typedef_name }} m_{{ r.name }};
    {% endfor %}
};
{% endmacro %}

{% macro definition(archive, tree) %}
{% set builder_name = archive.name +'Builder' %}
namespace internal
{
{% set archive_schema = tree.schema(archive).split('\n') %}
const char* const {{ archive.name }}__schema__ =
"{{ archive_schema|map('safe_cpp_string_line')|join('\\n"\n    "') }}";
{% for r in archive.resources|supported_resources %}
{% set resource_schema = tree.schema(r).split('\n') %}
const char* const {{ archive.name }}__{{ r.name }}__schema__ =
"{{ resource_schema|map('safe_cpp_string_line')|join('\\n"\n    "') }}";
{% endfor %}
}
// -------------------------------------------------------------------------------------------------

inline const char*
{{ archive.name }}::schema_definition( )
{
    return internal::{{ archive.name }}__schema__;
}

inline const char*
{{ archive.name }}::name_definition( )
{
    return "{{ archive.name }}";
}

inline const char*
{{ archive.name }}::name( ) const
{
    return {{ archive.name }}::name_definition( );
}

inline const char*
{{ archive.name }}::schema( ) const
{
    return {{ archive.name }}::schema_definition( );
}

inline
{{ archive.name }}
{{ archive.name }}::open( std::shared_ptr< flatdata::ResourceStorage > storage )
{
    {{ archive.name }} result( storage );
    result.initialize( );
    return result;
}

inline
{{ archive.name }}::{{ archive.name }}( std::shared_ptr< flatdata::ResourceStorage > storage )
    : flatdata::Archive( storage )
{
}

inline bool
{{ archive.name }}::load_contents( )
{
    bool is_open = true;

{% for r in archive.resources|simple_resources %}
    read_resource( is_open, m_{{ r.name }}, "{{ r.name }}", internal::{{ archive.name }}__{{ r.name }}__schema__ );
{% if r.max_size %}
    is_open = is_open && ( !m_{{ r.name }} || m_{{ r.name }}{%if r.optional %}->{% else %}.{% endif %}size( ) <= {{ r.max_size }} );
{% endif %}
{% endfor %}
{% for r in archive.resources|archive_resources %}
    load_archive( is_open, m_{{ r.name }}, "{{ r.name }}" );
{% endfor %}
    return is_open;
}

inline void
{{ archive.name }}::describe_resources( std::ostream& stream ) const
{
{% for r in archive.resources|simple_resources %}
    describe_resource( stream, "{{ r.name }}", m_{{ r.name }}{% if r.max_size %}, m_{{ r.name }} && m_{{ r.name }}{%if r.optional %}->{% else %}.{% endif %}size( ) > {{ r.max_size }}{% endif %} );
{% endfor %}
}

{% for r in archive.resources|supported_resources %}
inline auto {{ archive.name }}::{{ r.name }}( ) const -> const {{ r|archive_typedef_usage }}&
{
    return m_{{ r.name }};
}

{% endfor %}

// -------------------------------------------------------------------------------------------------

inline const char*
{{ builder_name }}::schema_definition( )
{
    return internal::{{ archive.name }}__schema__;
}

inline const char*
{{ builder_name }}::name( ) const
{
    return "{{ archive.name }}";
}

inline const char*
{{ builder_name }}::schema( ) const
{
    return {{ archive.name }}::schema_definition( );
}

inline
{{ builder_name }}::{{ builder_name }}( std::shared_ptr< flatdata::ResourceStorage > storage )
    : flatdata::ArchiveBuilder( storage )
{
}


inline {{ builder_name }}
{{ builder_name }}::open(std::shared_ptr< flatdata::ResourceStorage > storage )
{
    {{ builder_name }} result( storage );
    if ( !result.initialize( ) )
    {
        return {{ builder_name }}( );
    }
    return result;
}

{% for r in archive.resources|simple_resources %}
{%  if r|resource_provides_incremental_builder %}
inline auto {{ builder_name }}::start_{{ r.name }}( ) -> {{ r|typedef_name }}
{
    check_created( );
    return storage( ).{{ resource.incremental_write_call(r) }}( "{{ r.name }}", internal::{{ archive.name }}__{{ r.name }}__schema__ );
}
{% endif %}
{% if r|provides_setter %}
inline bool
{{ builder_name }}::set_{{ r.name }}( {{ r|typedef_name("Reader") }} data )
{
    check_created( );
    return storage( ).write< {{ r|typedef_name("Reader") }} >( "{{ r.name }}", internal::{{ archive.name }}__{{ r.name }}__schema__, data );
}
{% endif %}
{% endfor %}

{% for r in archive.resources|archive_resources %}
inline auto
{{ builder_name }}::{{ r.name }}( ) -> {{ r|typedef_name }}&
{
    if ( !m_{{ r.name }}.is_open( ) )
    {
        m_{{ r.name }} = {{ r|typedef_name }}::open( this->storage( ).create_directory( "{{ r.name }}" ) );
    }
    return m_{{ r.name }};
}
{% endfor %}
{% endmacro %}
