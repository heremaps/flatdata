{% import "rust/constant.jinja2" as constant %}
{% import "rust/enumeration.jinja2" as enumeration %}
{% import "rust/structure.jinja2" as structure %}
{% import "rust/archive.jinja2" as archive %}
{% import "rust/index.jinja2" as index %}
// Do not edit: This code was generated by flatdata's generator.

{%- for ns in tree.root.children recursive %}
{%- if ns | is_namespace %}

{% if ns | is_builtin_namespace %}
#[doc(hidden)]
{% else %}
#[allow(missing_docs)]
{% endif %}
pub mod {{ ns.name }} {
{{ loop(ns.children) }}
#[doc(hidden)]
pub mod schema {
pub mod structs {
{% for node in ns.children if node | is_structure %}
pub const {{ node.name | camel_to_snake_case | upper }}: &str = r#"{{ tree.schema(node) }}"#;
{% endfor %}
}

{% for node in ns.children if node | is_archive %}
{% set archive_ns = node.name | camel_to_snake_case %}
pub mod {{ archive_ns }} {

pub const {{ node.name | camel_to_snake_case | upper }}: &str = r#"{{ tree.schema(node) }}"#;

pub mod resources {
{% for r in node.resources | supported_resources %}
pub const {{ r.name | upper }}: &str = r#"{{ tree.schema(r) }}"#;
{% endfor %}
}
}
{% endfor %}
}

{%- for node in ns.children %}
    {% if node | is_structure and not node | is_multivector_index %}
        {{- structure.declaration(node) }}
    {% elif node | is_structure and node | is_multivector_index %}
        {{- index.declaration(node) }}
    {% elif node | is_enumeration %}
        {{- enumeration.declaration(node) }}
    {% elif node | is_archive %}
        {{- archive.declaration(node) }}
    {% elif node | is_constant %}
        {{- constant.declaration(node) }}
    {% endif %}
{% endfor %}
}
{% endif %}
{%- endfor %}
