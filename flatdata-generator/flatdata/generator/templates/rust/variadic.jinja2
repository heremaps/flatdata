{%- macro declaration(archive, resource) %}
{% set name = resource.name | snake_to_upper_camel_case %}
{% set types = resource.referenced_structures | structure_references %}

/// Enum for read-only heterogeneous access to elements in a
/// bucket of the [`{{resource.name}}`] resource.
///
/// [`{{resource.name}}`]: struct.{{archive}}.html#method.{{resource.name}}
#[derive(Clone, PartialEq)]
pub enum {{name}}Ref<'a> {
    {% for type in types %}
    #[allow(missing_docs)]
    {{type.node.name }}(&'a {{fully_qualified_name(archive, type.node)}}),
    {%- endfor %}
}

impl<'a> ::std::fmt::Debug for {{name}}Ref<'a> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match *self {
            {% for type in types %}
            {{name}}Ref::{{type.node.name}}(ref inner) => write!(f, "{:?}", inner),
            {% endfor %}
        }
    }
}

impl<'a> flatdata::VariadicRef for {{name}}Ref<'a> {
    #[inline]
    fn size_in_bytes(&self) -> usize {
        match *self {
            {% for type in types %}
            {{name}}Ref::{{type.node.name}}(_) => <{{fully_qualified_name(archive, type.node)}} as flatdata::Struct>::SIZE_IN_BYTES,
            {% endfor %}
        }
    }
}

/// Builder of buckets in the [`{{resource.name}}`] resource.
///
/// Refers to a single bucket in the [`{{resource.name}}`] multivector and
/// provides methods for adding heterogeneous data to the bucket.
///
/// [`{{resource.name}}`]: struct.{{archive}}.html#method.{{resource.name}}
pub struct {{name}}Builder<'a> {
    data: &'a mut Vec<u8>
}

impl<'a> {{name}}Builder<'a> {
    {% for type in types %}
    {% set inner_type = fully_qualified_name(archive, type.node) %}
    /// Adds data of the type [`{{type.node.name}}`] to the bucket.
    ///
    /// [`{{type.node.name}}`]: struct.{{type.node.name}}.html
    #[inline]
    pub fn add_{{ type.node.name | camel_to_snake_case }}<'b>(&'b mut self) -> &'b mut {{inner_type}} {
        let old_len = self.data.len();
        let increment = 1 + <{{inner_type}} as flatdata::Struct>::SIZE_IN_BYTES;
        self.data.resize(old_len + increment, 0);
        self.data[old_len] = {{loop.index0}};
        let slice = &mut self.data[1 + old_len..];
        {{inner_type}}::from_bytes_slice_mut(slice).expect("Logic error: Cannot create {{inner_type}} from slice")
    }
    {% endfor %}
}

/// Variadic struct attached to the [`{{resource.name}}`] archive resource.
///
/// It unifies the following data types:
//
{% for type in types %}
/// * [`{{type.node.name}}`]
{% endfor %}
///
/// ## Access pattern
///
/// This structure is used as a template parameter in [`{{resource.name}}`] multivector/
/// multiarray view. It does not contain any data, instead it references
///
/// * [`{{name}}Ref`] for the read-only heterogeneous access, and
/// * [`{{name}}Builder`] for the mutable builder pattern access.
///
/// [`{{resource.name}}`]: struct.{{archive}}.html#method.{{resource.name}}
/// [`{{name}}Ref`]: enum.{{name}}Ref.html
/// [`{{name}}Builder`]: struct.{{name}}Builder.html
{% for type in types %}
/// [`{{type.node.name}}`]: struct.{{type.node.name}}.html
{% endfor %}
#[derive(Clone)]
pub struct {{name}} {}

impl flatdata::VariadicIndex for {{name}} {
    type Index = {{ fully_qualified_name(archive, resource.index_reference.node) }};
}

impl<'a> flatdata::VariadicStruct<'a> for {{name}} {
    type Item = {{name}}Ref<'a>;

    #[inline]
    fn create(index: flatdata::TypeIndex, data: &'a [u8]) -> Self::Item
    {
        match index {
            {% for type in types %}
            {% set inner_type = fully_qualified_name(archive, type.node) %}
                {{loop.index0}} => {{name}}Ref::{{type.node.name}}({{inner_type}}::from_bytes_slice(&data).expect("Corrupted data")),
            {% endfor %}
            _ => panic!("invalid type index {} for variadic type {{name}}Ref", index),
        }
    }

    type ItemMut = {{name}}Builder<'a>;

    #[inline]
    fn create_mut(data: &'a mut Vec<u8>) -> Self::ItemMut
    {
        Self::ItemMut { data }
    }
}
{%- endmacro %}
