namespace test_structures {

struct SmallRef {
    ref : u32 : 4;
}

archive SmallRefArchive {
    @optional
    list1 : vector< SmallRef >;
    list2 : vector< SmallRef >;
    @optional
    multi_list1 : multivector< 32, SmallRef >;
    multi_list2 : multivector< 32, SmallRef >;
    @optional
    raw1 : raw_data;
    raw2 : raw_data;

    @explicit_reference( SmallRef.ref, list1 )
    @explicit_reference( SmallRef.ref, list2 )
    @explicit_reference( SmallRef.ref, multi_list1 )
    @explicit_reference( SmallRef.ref, multi_list2 )
    @explicit_reference( SmallRef.ref, raw1 )
    @explicit_reference( SmallRef.ref, raw2 )
    refs : vector< SmallRef >;
}

const i8 INVALID_ZERO = 0;
const i8 INVALID_MIN_INT = -128;
const i8 INVALID_MAX_INT = 127;

struct TestInvalidValue {
    @optional( INVALID_ZERO )
    invalid_zero : i8;
    @optional( INVALID_MIN_INT )
    invalid_min_int : i8;
    @optional( INVALID_MAX_INT )
    invalid_max_int : i8;
}

// Enumeration with some overlapping values
enum Enum1 : u16 : 3{
    // = 0
    VALUE_1,
    // = 3
    VALUE_2 = 3,
    // = 4
    VALUE_3,
    // = 1
    VALUE_4 = 1,
    // = 2
    VALUE_5
}

enum SignedEnum1 : i32 : 3 {
    VALUE_INT4_MIN = -4,
    VALUE_INT4_MAX = 3,
    VALUE_INT3_MIN = -2,
    VALUE_INT3_MAX = 1,
    VALUE_MINUS_ONE = -1
}

struct StructWithEnum
{
    a : u32 : 19;
    b : Enum1 : 3;
    c : Enum1;
}

struct StructWithSignedEnum
{
    a : SignedEnum1;
}

struct SimpleStruct {
    a : u32 : 32;
    b : u32 : 32;
}

struct OtherSimpleStruct {
    a : u32 : 32;
    b : u32 : 32;
}

struct BitPackedStruct {
    a : bool : 1;
    b : u32 : 32;
    c : u32 : 7;
}

struct SignedStruct {
    a : i16 : 5;
    b : u32 : 32;
    c : i32 : 7;
    d : u32 : 32;
}

struct AStruct {
    value : u64 : 8;
}

struct BStruct {
    value : u64 : 16;
}

struct CStruct {
    value : u64 : 32;
}

struct TestIndexType48 {
    @range(range)
    value : u64 : 48;
}

struct TestIndexType32 {
    @range(range)
    value : u64 : 48;
}

archive SimpleResources {
    object_resource: AStruct;
    vector_resource: vector< AStruct >;
    multivector_resource: multivector< 33, AStruct >;
    raw_data_resource: raw_data;
    @optional
    optional_resource: raw_data;
}

archive OnlyOptional {
    @optional
    optional_resource: raw_data;
}

archive InnerArchive {
    inner : AStruct;
}

archive OuterArchive {
    outer1: AStruct;
    outer2: AStruct;
    inner: archive InnerArchive;
}

archive OutermostArchive {
    outermost: AStruct;
    outer: archive OuterArchive;
}

archive OuterWithOptional {
    outer: AStruct;

    @optional
    archive_resource: archive InnerArchive;
}

} // namespace test_structures

namespace test_structures.backward_compatibility {

archive TestInstance {
    instance_resource: .test_structures.SignedStruct;
}

archive TestVector {
    vector_resource: vector< .test_structures.SignedStruct >;
}

archive TestMultivector {
    multivector_resource: multivector< 33,
                              .test_structures.SimpleStruct,
                              .test_structures.SignedStruct >;
}

archive TestRawData {
    raw_data_resource : raw_data;
}

} // namespace backward_compatibility
