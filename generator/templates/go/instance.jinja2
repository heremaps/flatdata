{% macro generate(tree, archive, resource) %}
type {{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance struct {
    internal flatdata.ResourceHandle
    IsOptional bool
    IsOpen bool
}

func (v *{{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance) Get() *{{ resource|to_initializer(tree)|to_go_case }} {
	return &{{ resource|to_initializer(tree)|to_go_case }}{
	    internal: v.internal,
	}
}

func (v *{{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance) GetSize() int {
	return 1
}

func (v *{{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance) Close() {
    v.internal.Close()
    v.IsOpen = false
}

func (v *{{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance) GetSizeInBytes() int {
    return v.internal.Len()
}

func (v *{{ archive.name|to_go_case }}{{ resource.name|to_go_case }}Instance) ToString() string {
    buffer := bytes.Buffer{}
    buffer.WriteString("{")
    buffer.WriteString("\n")
    buffer.WriteString("\"container_type\": \"Vector\",")
    buffer.WriteString("\n")
    buffer.WriteString("\"size\": ")
    buffer.WriteString(strconv.Itoa(v.GetSize()))
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("\"size_in_bytes\": ")
    buffer.WriteString(strconv.Itoa(v.GetSizeInBytes()))
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("\"element_types\": [")
    buffer.WriteString("\n")
    buffer.WriteString("    {")
    buffer.WriteString("\n")
    buffer.WriteString("        \"name\": \"")
    buffer.WriteString("{{ resource.referenced_structures[0].node.name|to_go_case }}")
    buffer.WriteString("\",")
    buffer.WriteString("\n")
    buffer.WriteString("        \"attributes\": [")
    buffer.WriteString("\n")
    {% for field in resource.referenced_structures[0].node.fields %}
    buffer.WriteString("            {")
    buffer.WriteString("\n")
    buffer.WriteString("                \"name\": \"")
    buffer.WriteString("{{ field.name }}")
    buffer.WriteString("\"")
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("                \"offset\": ")
    buffer.WriteString(strconv.Itoa({{ field.offset }}))
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("                \"width\": ")
    buffer.WriteString(strconv.Itoa({{ field.type.width }}))
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("                \"is_signed\": ")
    buffer.WriteString("{{ field.type.is_signed|lower }}")
    buffer.WriteString(",")
    buffer.WriteString("\n")
    buffer.WriteString("            },")
    buffer.WriteString("\n")
    {% endfor %}
    buffer.WriteString("        ]")
    buffer.WriteString("\n")
    buffer.WriteString("    }")
    buffer.WriteString("\n")
    buffer.WriteString("]")
    buffer.WriteString("\n")
    buffer.WriteString("}")
	return buffer.String()
}
{% endmacro %}